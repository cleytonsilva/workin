/**
 * WorkIn Extension - Teste de Conectividade
 * Script para testar se a comunica√ß√£o entre popup e content script est√° funcionando
 */

console.log('üîß WorkIn Extension - Teste de Conectividade');

// Testa se estamos em uma p√°gina do LinkedIn
if (window.location.href.includes('linkedin.com')) {
  console.log('‚úÖ P√°gina do LinkedIn detectada');
  
  // Aguarda um pouco para garantir que tudo foi carregado
  setTimeout(() => {
    console.log('üîç Verificando componentes WorkIn...');
    
    // Verifica se os m√≥dulos est√£o carregados
    if (window.WorkInJobScraper) {
      console.log('‚úÖ WorkInJobScraper carregado');
    } else {
      console.log('‚ùå WorkInJobScraper n√£o encontrado');
    }
    
    if (window.WorkInSafetyManager) {
      console.log('‚úÖ WorkInSafetyManager carregado');
    } else {
      console.log('‚ùå WorkInSafetyManager n√£o encontrado');
    }
    
    if (window.WorkInLinkedInDetector) {
      console.log('‚úÖ WorkInLinkedInDetector carregado');
    } else {
      console.log('‚ùå WorkInLinkedInDetector n√£o encontrado');
    }
    
    // Testa se estamos em uma p√°gina de vagas
    if (window.location.href.includes('/jobs/')) {
      console.log('‚úÖ P√°gina de vagas detectada');
      
      // Verifica se h√° elementos de vaga na p√°gina
      const jobElements = document.querySelectorAll('.job-card-container, .jobs-search-results__list-item');
      console.log(`üìä ${jobElements.length} elementos de vaga encontrados`);
      
      if (jobElements.length > 0) {
        console.log('‚úÖ Elementos de vaga detectados - pronto para coleta');
      } else {
        console.log('‚ö†Ô∏è Nenhum elemento de vaga encontrado');
      }
    } else {
      console.log('‚ö†Ô∏è N√£o est√° em uma p√°gina de vagas');
    }
    
  }, 2000);
  
} else {
  console.log('‚ùå N√£o est√° em uma p√°gina do LinkedIn');
}

// Listener para mensagens do popup
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('üì® Mensagem recebida:', message);
  
  try {
    switch (message.action) {
      case 'startJobCollection':
        console.log('üöÄ Iniciando coleta de vagas...');
        if (window.WorkInJobScraper) {
          window.WorkInJobScraper.collectJobsWithScroll(message.maxResults || 50)
            .then(result => {
              console.log('‚úÖ Coleta conclu√≠da:', result);
              sendResponse(result);
            })
            .catch(error => {
              console.error('‚ùå Erro na coleta:', error);
              sendResponse({ success: false, error: error.message });
            });
        } else {
          sendResponse({ success: false, error: 'WorkInJobScraper n√£o carregado' });
        }
        break;
        
      case 'scanPage':
        console.log('üîç Escaneando p√°gina...');
        const jobElements = document.querySelectorAll('.job-card-container, .jobs-search-results__list-item');
        const result = {
          success: true,
          jobsFound: jobElements.length,
          url: window.location.href,
          timestamp: Date.now()
        };
        console.log('‚úÖ Escaneamento conclu√≠do:', result);
        sendResponse(result);
        break;
        
      default:
        console.log('‚ùì A√ß√£o desconhecida:', message.action);
        sendResponse({ success: false, error: 'A√ß√£o desconhecida' });
    }
  } catch (error) {
    console.error('‚ùå Erro ao processar mensagem:', error);
    sendResponse({ success: false, error: error.message });
  }
  
  return true; // Mant√©m o canal aberto para resposta ass√≠ncrona
});

console.log('üéØ Teste de conectividade configurado');
